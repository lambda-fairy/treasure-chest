#!/bin/echo This is a template file, and is not supposed to be run directly --

# Bootstrap code ripped mercilessly from py.test :)

# Two variables should be defined above:
#   + sources: a base64 encoded, zlib compressed, pickled dictionary
#     mapping file names to source strings
#   + entry: a string containing the code to run

import sys
import base64
from io import StringIO
import zlib

class DictImporter(object):
    def __init__(self, sources):
        self.sources = sources

    def find_module(self, name, path=None):
        # print "find_module:", name
        fullname = name.replace('.', '/')
        if fullname + '.py' in self.sources:
            return self
        if fullname + '/__init__.py' in self.sources:
            return self
        return None

    def load_module(self, name):
        # print "load_module:", name
        fullname = name.replace('.', '/')
        from types import ModuleType
        try:
            s = self.sources[fullname + '.py']
            is_pkg = False
        except KeyError:
            s = self.sources[fullname + '/__init__.py']
            is_pkg = True

        co = compile(s, fullname, 'exec')
        module = sys.modules.setdefault(name, ModuleType(name))
        module.__file__ = "%s/%s" % (__file__, fullname)
        module.__loader__ = self
        if is_pkg:
            module.__path__ = [fullname]

        exec(co, module.__dict__)
        return sys.modules[name]

    def get_source(self, name):
        fullname = name.replace('.', '/')
        res = self.sources.get(fullname + '.py')
        if res is None:
            res = self.sources.get(name + '/__init__.py')
        return res

def override_open(sources):
    def open_(name, mode='rt'):
        base, text = parse_mode(mode)

        if base != 'r':
            raise IOError('cannot write to read-only file')

        try:
            contents = sources[name]
        except KeyError:
            raise IOError('file not found: {}'.format(name))

        if text:
            return StringIO(contents)
        else:
            return BytesIO(contents)

    def parse_mode(mode):
        if len(mode) == 1:
            return parse_rw(mode[0]), True
        elif len(mode) == 2:
            return parse_rw(mode[0]), parse_bt(mode[1])
        else:
            raise ValueError("invalid mode: '{}'".format(mode))

    def parse_rw(rw):
        if rw in ('r', 'w', 'a'):
            return rw
        else:
            raise ValueError("unsupported mode '{}'".format(rw))

    def parse_bt(bt):
        try:
            return ('b', 't').index(bt)
        except IndexError:
            raise ValueError("mode must be one of 'b' or 't', not '{}'".format(bt))

    return open_

if __name__ == "__main__":
    if sys.version_info >= (3, 0):
        import pickle
        sources = sources.encode("ascii") # ensure bytes
        sources = pickle.loads(zlib.decompress(base64.decodebytes(sources)))
    else:
        raise SystemExit('Sorry, Python 2 is not supported')

    importer = DictImporter(sources)
    sys.meta_path.append(importer)

    locals_ = locals().copy()
    locals_['open'] = override_open(sources)

    exec(entry, locals_)
